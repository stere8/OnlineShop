// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Data;

#nullable disable

namespace OnlineShop.Migrations
{
    [DbContext(typeof(OnlineShopDbContext))]
    [Migration("20250104161226_AddIdentitySchema")]
    partial class AddIdentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnlineShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Home Appliances"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("OnlineShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OnlineShop.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "High-performance laptop",
                            ImageUrl = "laptop.jpg",
                            Name = "Laptop",
                            Price = 1500.00m,
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Latest smartphone with 5G",
                            ImageUrl = "smartphone.jpg",
                            Name = "Smartphone",
                            Price = 800.00m,
                            StockQuantity = 15
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Portable Bluetooth speaker with high-quality sound",
                            ImageUrl = "speaker.jpg",
                            Name = "Bluetooth Speaker",
                            Price = 100.00m,
                            StockQuantity = 20
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Description = "Waterproof smartwatch with health tracking features",
                            ImageUrl = "smartwatch.jpg",
                            Name = "Smartwatch",
                            Price = 200.00m,
                            StockQuantity = 30
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Description = "Noise-cancelling over-ear headphones",
                            ImageUrl = "headphones.jpg",
                            Name = "Headphones",
                            Price = 75.00m,
                            StockQuantity = 25
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "100% cotton T-shirt",
                            ImageUrl = "tshirt.jpg",
                            Name = "T-shirt",
                            Price = 20.00m,
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Description = "Classic blue jeans",
                            ImageUrl = "jeans.jpg",
                            Name = "Jeans",
                            Price = 45.00m,
                            StockQuantity = 40
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "Warm winter jacket",
                            ImageUrl = "jacket.jpg",
                            Name = "Jacket",
                            Price = 100.00m,
                            StockQuantity = 15
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Description = "Comfortable running shoes",
                            ImageUrl = "sneakers.jpg",
                            Name = "Sneakers",
                            Price = 60.00m,
                            StockQuantity = 35
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Description = "Elegant evening dress",
                            ImageUrl = "dress.jpg",
                            Name = "Dress",
                            Price = 80.00m,
                            StockQuantity = 20
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            Description = "Compact microwave oven",
                            ImageUrl = "microwave.jpg",
                            Name = "Microwave Oven",
                            Price = 150.00m,
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3,
                            Description = "Double-door refrigerator with smart features",
                            ImageUrl = "refrigerator.jpg",
                            Name = "Refrigerator",
                            Price = 1200.00m,
                            StockQuantity = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Description = "Front-loading washing machine",
                            ImageUrl = "washingmachine.jpg",
                            Name = "Washing Machine",
                            Price = 500.00m,
                            StockQuantity = 8
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3,
                            Description = "Energy-efficient air conditioner",
                            ImageUrl = "airconditioner.jpg",
                            Name = "Air Conditioner",
                            Price = 400.00m,
                            StockQuantity = 7
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3,
                            Description = "Multi-functional kitchen blender",
                            ImageUrl = "blender.jpg",
                            Name = "Blender",
                            Price = 30.00m,
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            Description = "Classic novel by F. Scott Fitzgerald",
                            ImageUrl = "greatgatsby.jpg",
                            Name = "Novel - The Great Gatsby",
                            Price = 10.00m,
                            StockQuantity = 100
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4,
                            Description = "Comprehensive high school science textbook",
                            ImageUrl = "sciencetextbook.jpg",
                            Name = "Science Textbook",
                            Price = 50.00m,
                            StockQuantity = 30
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4,
                            Description = "Illustrated story book for kids",
                            ImageUrl = "storybook.jpg",
                            Name = "Children's Story Book",
                            Price = 15.00m,
                            StockQuantity = 70
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 5,
                            Description = "500-piece puzzle game",
                            ImageUrl = "puzzle.jpg",
                            Name = "Puzzle Game",
                            Price = 25.00m,
                            StockQuantity = 60
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 5,
                            Description = "Remote-controlled toy car",
                            ImageUrl = "toycar.jpg",
                            Name = "Toy Car",
                            Price = 10.00m,
                            StockQuantity = 45
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineShop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Models.OrderItem", b =>
                {
                    b.HasOne("OnlineShop.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Models.Product", b =>
                {
                    b.HasOne("OnlineShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineShop.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
